@code haskell
class Eq a where
  (==):: a -> a -> Bool
  (/=):: a -> a -> Bool
@end

@code haskell
class Eq a 
  (==)::a->a->Bool

--instance Eq Bool where
--  ....
instance (Eq a, Eq b) => Eq (a,b) where
  (==) (x1,y1)(x2,y2) = x1==x2 && y1==y2
--instance Eq a => Eq [a]
-- ...

foo x y = if x==y then "equal"
          else "not equal"
foo:Eq a => a->a->String
@end

* The path
  foo (x1,y1) z = if (x1,y1) == z then "equal"
                                  else "Not equal"
  a->b->c
  a->b->"String"
  (a1,a2)->b->"String"
  (a1,a2)-> (a1,a2)->"String"

----------------------------------------------------------

Parametric polymorphism : same code works for all type
Ad-hoc Polymorphism : same code soesnt work for all time. 
